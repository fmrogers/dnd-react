.dividerWrapper {
  height: calc(var(--cpl-dnd-sort-list-item-height) / 2 + 4px);
  margin: calc(var(--cpl-dnd-sort-list-item-height) / 4 * -1) 0;
  /* background-color: lightcoral; */
  position: relative;
}

/**
 * Disable dropping over previous divider using CSS to avoid
 * being able to drop an item below the previous item (which could cause confusion).
 * The dragging state is only available on the item being dragged, so we use the sibling selector to
 * disable pointer events on the divider before it.
 */
.dividerWrapper:has(+ [data-is-dragging='true']) {
  pointer-events: none;
}

/* CAN USE THIS TO DISTINGUISH BETWEEN GROUPED DIVIDERS */

/* Divider for nested element */
.dividerWrapper:has(+ .dividerWrapper) {
  border: 1px solid lightcoral;
  width: 68%;
  transform: translateX(40%);
}

/* Divider for below parent element */
.dividerWrapper + .dividerWrapper {
  border: 1px solid red;
  width: 40%;
}

.draggingOverListDivider {
  display: flex;
  align-items: center;
  justify-content: center;
}

.draggingOverListDivider::before {
  content: '';

  --diameter: 12px;

  height: var(--diameter);
  margin-left: calc(-1 * var(--diameter) / 2);
  width: var(--diameter);

  border-radius: 50%;

  background-color: red;
}

.draggingOverListDivider::after {
  content: '';

  height: 4px;
  width: 100%;

  background-color: red;
}

.divider::before {
  content: '';

  position: absolute;
  top: -16px;
  left: 0;
  width: 100%;
  height: 32px;

  z-index: 1;

  background-color: transparent;
}

.divider::before:hover {
  background-color: lightcoral;
}

.draggingOverListItem {
  position: relative;
}

.draggingOverListItem::after {
  content: '';

  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;

  z-index: 1;

  background-color: rgba(135, 206, 250, 0.3);
}
